import sys
from Wallet import*
from Lab4 import*
class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.key = key

    def __len__(self):
        def count(node):
            if node is None:
                return 0
            else:
                return 1 + count(node.left) + count(node.right)
        return count(self)

def insert(node, key):
    # If the tree is empty, return a new node
    if node is None:
        return Node(key)

    # Otherwise recur down the tree
    if key < node.key:
        node.left = insert(node.left, key)
    else:
        node.right = insert(node.right, key)

    # return the (unchanged) node pointer
    return node


# Given a non-empty binary
# search tree, return the node
# with minum key value
# found in that tree. Note that the
# entire tree does not need to be searched

def minValueNode(node):
    root = node

    # loop down to find the leftmost leaf
    while (root.left is not None):
        root = root.left

    return root



def inorder(root):
    if not root:
        return
    inorder(root.left)
    print (root.key)
    inorder(root.right)

def post_order(root):
    if not root:
        return
    post_order(root.left)
    post_order(root.right)
    print(root.key)


def pre_order(root):
    if not root:
        return
    print (root.key)
    pre_order(root.left)
    pre_order(root.right)


def breadthfirst(root):
    # Base Case
    if root is None:
        return

    # Create an empty queue
    # for level order traversal
    queue = []

    # Enqueue Root and initialize height
    queue.append(root)

    while queue:

        # Print front of queue and
        # remove it from queue
        print(queue[0].key)
        node = queue.pop(0)

        # Enqueue left child
        if node.left is not None:
            queue.append(node.left)

        # Enqueue right child
        if node.right is not None:
            queue.append(node.right)


def deleteNode(root, key):
    # Base Case
    if root is None:
        return root

    # If the key to be deleted
    # is smaller than the root's
    # key then it lies in  left subtree
    if key < root.key:
        root.left = deleteNode(root.left, key)

    # If the kye to be delete
    # is greater than the root's key
    # then it lies in right subtree
    elif (key > root.key):
        root.right = deleteNode(root.right, key)

    # If key is same as root's key, then this is the node
    # to be deleted
    else:

        # Node with only one child or no child
        if root.left is None:
            temp = root.right
            root = None
            return temp

        elif root.right is None:
            temp = root.left
            root = None
            return temp

        # Node with two children:
        # Get the inorder successor
        # (smallest in the right subtree)
        temp = minValueNode(root.right)

        # Copy the inorder successor's
        # content to this node
        root.key = temp.key

        # Delete the inorder successor
        root.right = deleteNode(root.right, temp.key)

    return root


def isEmpty(root):
    # If empty tree
    if root is None:
        return False

    # If leaf node
    if root.left is None and root.right is None:
        return False

    # If both left and right subtress are not None and
    # left and right subtress are full
    if root.left is not None and root.right is not None:
        return (isEmpty(root.left) and isEmpty(root.right))

    # We reach here when none of the above if condiitions work
    return True

def search(root, key):
    print(root.key,key)
    # Base Cases: root is null or key is present at root
    if root is None or root.key == key:
        return root

    # Key is greater than root's key
    if root.key < key:
        return search(root.right, key)

    # Key is smaller than root's key
    return search(root.left, key)


root = Node(USD(52,12))
root = insert(root, USD(23,44))
root = insert(root, USD(87,43))
root = insert(root, USD(68,99))
root = insert(root, USD(111,22))
root = insert(root, USD(44,55))
root = insert(root, USD(77,77))
root = insert(root, USD(18,36))
root = insert(root, USD(543,21))
root = insert(root, USD(20,21))
root = insert(root, USD(345,67))
root = insert(root, USD(36,18))
root = insert(root, USD(48,48))
root = insert(root, USD(101,00))
root = insert(root, USD(11))
root = insert(root, USD(21))
root = insert(root, USD(51))
root = insert(root, USD(1))
root = insert(root, USD(251))
root = insert(root, USD(151))


def menu():
    choice = 1
    global root
    while choice !=0:
        try:
            choice = int(input("What would you like to do?\n"
                               "[1]Insert a node\n"
                               "[2]Delete a node\n"
                               "[3]Search\n"
                               "[4]Display\n"
                               "[5]Print to text file\n"
                               "[0]Quit"))
            if choice == 1:
                #if root is none set it equal to a new node, else add it to the node already there
                swag = ((USD(int(input("Dollar amount")), int(input("Cents amount")))))
                if root == None:
                    root = Node(swag)
                else:
                    insert(root, swag)


            elif choice == 2:
                amt = USD(int(input("Dollar amount")), int(input("Cents amount")))
                deleteNode(root, amt)
                if len(root) == 1 and root.key == amt:
                    root = None

            elif choice == 3:
               if search(root, USD(int(input("Dollar amount")), int(input("Cents amount")))):
                   print("Yes it exists")
               else:
                   print("No, does not exist")

            elif choice == 4:
                if isEmpty(root):
                    print("Is Empty")
                else:
                    print("Is not Empty")

                print("Breadth First")
                breadthfirst(root)
                print("pre-order")
                print(pre_order(root))
                print("inorder")
                print(inorder(root))
                print("postorder")
                print(post_order(root))

            elif choice == 5:
                restorepoint = sys.stdout
                sys.stdout = open("../pythonProject6/test.txt", "w")

                if isEmpty(root):
                    print("Is Empty")
                else:
                    print("Is not Empty")

                print("Breadth First")
                print(breadthfirst(root))
                print("pre-order")
                print(pre_order(root))
                print("inorder")
                print(inorder(root))
                print("postorder")
                print(post_order(root))

                sys.stdout = restorepoint


            elif choice ==0:
                print("bye bye")

            else:
                print("Option not valid, please try 1-5")
        except:
            print("Valid integer was not entered")
menu()
